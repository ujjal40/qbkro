name: Release Tests

on:
  schedule:
    # run every few days so caches aren't evicted
    - cron: "0 0 1-30/3 * *"
  push:
    branches:
      - master
      - comprehensive_tests
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  LATEST_PYTHON_VER: "3.10"
  PYTHON_VERSIONS: '[ "3.10", "3.9", "3.8", "3.7", "2.7", "pypy-3.8", "3.11-dev" ]'
  SUBMIT_COVERAGE_VERSIONS: 2.7, 3.10
  LATEST_QBT_VER: 4.4.3  # sync this with tests-extended matrix exclude and smoke test name...
  QBT_VERS: '[ "4.4.3", "4.4.1", "4.4.0", "4.3.9", "4.3.8", "4.3.7", "4.3.6", "4.3.5", "4.3.4.1", "4.3.3", "4.3.2", "4.3.1", "4.3.0.1" ]'
  QBT_LEGACY_VERS: '[ "4.2.5", "4.2.0" ]'
  QBT_ALWAYS_TEST: 4.4.1, 4.4.0, 4.3.9, 4.3.8, 4.3.6, 4.3.4.1, 4.3.3, 4.3.2, 4.2.5, 4.2.0
  QT_USE_DEFAULT_PAA: 4.3.9, 4.3.8, 4.3.7, 4.3.6, 4.3.5, 4.3.4.1, 4.3.3, 4.3.2, 4.3.1, 4.3.0.1
  LIBTORRENT_VER: 2.0.6
  COMPREHENSIVE_TESTS_BRANCH: comprehensive_tests
  PYTHON_QBITTORRENTAPI_HOST: localhost:8080
  PYTHON_QBITTORRENTAPI_PASSWORD: adminadmin
  PYTHON_QBITTORRENTAPI_USERNAME: admin
  LIBTORRENT_INSTALLS: ${{ github.workspace }}/resources/libtorrent_installs
  QBITTORRENT_INSTALLS: ${{ github.workspace }}/resources/qbittorrent_installs

jobs:
  verify:
    name: Get Ready
    runs-on: ubuntu-20.04
    outputs:
      python-versions: ${{ steps.set-python-versions.outputs.python-versions }}
      qbittorrent-versions: ${{ steps.set-qbittorrent-versions.outputs.qbittorrent-versions }}
      qbittorrent-legacy-versions: ${{ steps.set-qbittorrent-legacy-versions.outputs.qbittorrent-legacy-versions }}
    steps:
      - name: Declare Python Versions for Testing
        id: set-python-versions
        run: echo "::set-output name=python-versions::$PYTHON_VERSIONS"

      - name: Declare qBittorrent Versions for Testing
        id: set-qbittorrent-versions
        run: echo "::set-output name=qbittorrent-versions::$QBT_VERS"

      - name: Declare Legacy qBittorrent Versions for Testing
        id: set-qbittorrent-legacy-versions
        run: echo "::set-output name=qbittorrent-legacy-versions::$QBT_LEGACY_VERS"

      - name: Branch
        run: echo Branch ${{ github.ref }} ${{ github.head_ref }}

      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.LATEST_PYTHON_VER }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.LATEST_PYTHON_VER }}
          cache: 'pip'

      - name: Lint API with flake8
        run: |
          pip -q install -U flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 ./qbittorrentapi --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 ./qbittorrentapi --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Lint Tests with flake8
        run: |
          pip -q install -U flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 ./tests --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 ./tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Black
        run: |
          pip -q install -U black
          black --version
          # py34 avoids changes that are python2.7 incompatible
          black ./qbittorrentapi/ ./tests/ --check --diff --target-version py34

  tests-smoke:
    #######
    # Run tests against most recent qBittorrent release and all Python releases
    #######
    name: "Release Smoke Test 3.10 - v4.4.3"
    needs: verify
    runs-on: ubuntu-20.04  # update Qt PPA when moving beyond 20.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.LATEST_PYTHON_VER }}
          cache: 'pip'

      - name: Install OS Dependencies (post v4.4.0)
        # dependencies to compile and run libtorrent and qBittorrent
        # qBt v4.4.0 requires >Qt v5.15.2....but that Qt isn't available from ubuntu PPAs until 21.04
        run: |
          sudo add-apt-repository ppa:beineri/opt-qt-5.15.2-focal
          sudo apt update
          sudo apt install build-essential cmake ninja-build pkg-config git zlib1g-dev libssl-dev libgeoip-dev \
            automake libtool libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev
          sudo apt install --no-install-recommends qt515base qt515tools libqt5svg5-dev

      - name: Cache libtorrent
        # set up cache for libtorrent library
        id: cache-libtorrent
        uses: actions/cache@v3
        with:
          path: ${{ env.LIBTORRENT_INSTALLS }}/libtorrent_${{ env.LIBTORRENT_VER }}
          key: libtorrent-installs--${{ runner.os }}-${{ env.LIBTORRENT_VER }}

      - name: Build libtorrent
        # if cache missed, build libtorrent library.
        if: (steps.cache-libtorrent.outputs.cache-hit != 'true')
        run: |
          set -x
          SRC_DIR="$LIBTORRENT_INSTALLS/src"
          LIBTORRENT_INSTALL_DIR="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER"
          mkdir -p "$SRC_DIR" && mkdir -p "$LIBTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          git clone --recurse-submodules https://github.com/arvidn/libtorrent.git --branch v${{ env.LIBTORRENT_VER }} --depth 1
          cd libtorrent
          cmake \
            -B cmake-build-dir/Release \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$LIBTORRENT_INSTALL_DIR"
          cmake --build cmake-build-dir/Release --parallel $(nproc)
          cmake --install cmake-build-dir/Release

      - name: Cache qBittorrent
        # set up cache for qBittorrent binary
        id: cache-qbittorrent
        uses: actions/cache@v3
        with:
          path: ${{ env.QBITTORRENT_INSTALLS }}
          key: qbittorrent-installs--${{ runner.os }}-${{ env.LATEST_QBT_VER }}-${{ env.LIBTORRENT_VER }}

      - name: Build qBittorrent
        # if cache missed, compile qBittorrent binary
        if: (steps.cache-qbittorrent.outputs.cache-hit != 'true')
        run: |
          set -x
          SRC_DIR="$QBITTORRENT_INSTALLS/src"
          QBITTORRENT_INSTALL_DIR="$QBITTORRENT_INSTALLS/qbt_${{ env.LATEST_QBT_VER }}"
          LIBTORRENT_DIR="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER"
          mkdir -p "$SRC_DIR" && mkdir -p "$QBITTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          rm -rf qBittorrent
          git clone https://github.com/qbittorrent/qBittorrent.git --branch release-${{ env.LATEST_QBT_VER }} --depth 1
          cd qBittorrent
          cmake \
            -G "Ninja" \
            -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$LIBTORRENT_DIR" \
            -DVERBOSE_CONFIGURE=ON \
            -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE \
            -DQBT_VER_STATUS= \
            -DGUI=OFF \
            -DCMAKE_INSTALL_PREFIX="$QBITTORRENT_INSTALL_DIR"
          cmake --build build --parallel $(nproc)
          cmake --install build

      - name: Install Python Dependencies
        # install the python dependencies to test qbittorrent-api
        run: |
          python -m pip install -U pip wheel setuptools
          pip install -U codecov coveralls pytest pytest-cov
          pip install .

      - name: Test with pytest
        # finally....start qBittorrent and run tests via pytest
        run: |
          mkdir -p $HOME/Downloads  # default download location for qbittorrent
          export LD_LIBRARY_PATH="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER/lib/:$LD_LIBRARY_PATH"
          $QBITTORRENT_INSTALLS/qbt_${{ env.LATEST_QBT_VER }}/bin/qbittorrent-nox --daemon
          python -c "import sys; print(sys.version)"
          $QBITTORRENT_INSTALLS/qbt_${{ env.LATEST_QBT_VER }}/bin/qbittorrent-nox -v
          export QBT_VER=${{ env.LATEST_QBT_VER }}  # tell pytest which qbittorrent is being tested
          pytest

      - name: Upload Coverage to Codecov
        # send coverage report from pytest to codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true

  tests-extended:
    #######
    # Run tests against recent qBittorrent releases and all Python releases
    #######
    name: "Release Test ${{ matrix.python-version }} - v${{ matrix.QBT_VER }}"
    needs: [tests-smoke, verify]
    runs-on: ubuntu-20.04  # update Qt PPA when moving beyond 20.04
    continue-on-error: true
    strategy:
      matrix:
        QBT_VER: ${{ fromJson(needs.verify.outputs.qbittorrent-versions) }}
        python-version: ${{ fromJson(needs.verify.outputs.python-versions) }}
        exclude:
          - QBT_VER: 4.4.3  # sync with LATEST_QBT_VER
            python-version: "3.10"  # sync with LATEST_PYTHON_VER
    # TODO: each step currently has an over-complicated conditional to prevent always running all tests.
    # TODO: this can be removed once the matrix supports conditions
    steps:
      - name: Checkout Repo
        if: (contains(github.ref, env.COMPREHENSIVE_TESTS_BRANCH) || contains(env.QBT_ALWAYS_TEST, matrix.QBT_VER))
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        if: (contains(github.ref, env.COMPREHENSIVE_TESTS_BRANCH) || contains(env.QBT_ALWAYS_TEST, matrix.QBT_VER))
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install OS Dependencies (post v4.4.0)
        # dependencies to compile and run libtorrent and qBittorrent
        # qBt v4.4.0 requires >Qt v5.15.2....but that Qt isn't available from ubuntu PPAs until 21.04
        if: |
          (contains(github.ref, env.COMPREHENSIVE_TESTS_BRANCH) || contains(env.QBT_ALWAYS_TEST, matrix.QBT_VER)
          && ! contains(env.QT_USE_DEFAULT_PAA, matrix.QBT_VER))
        run: |
          sudo add-apt-repository ppa:beineri/opt-qt-5.15.2-focal
          sudo apt update
          sudo apt install build-essential cmake ninja-build pkg-config git zlib1g-dev libssl-dev libgeoip-dev \
            automake libtool libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev
          sudo apt install --no-install-recommends qt515base qt515tools libqt5svg5-dev

      - name: Install OS Dependencies (pre v4.4.0)
        # dependencies to compile and run libtorrent and qBittorrent
        if: |
          (contains(github.ref, env.COMPREHENSIVE_TESTS_BRANCH) || contains(env.QBT_ALWAYS_TEST, matrix.QBT_VER)
          && contains(env.QT_USE_DEFAULT_PAA, matrix.QBT_VER))
        run: |
          sudo apt update
          sudo apt install build-essential cmake ninja-build pkg-config git zlib1g-dev libssl-dev libgeoip-dev \
            automake libtool libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev
          sudo apt install --no-install-recommends qtbase5-dev qttools5-dev libqt5svg5-dev

      - name: Cache libtorrent
        # set up cache for libtorrent library
        if: (contains(github.ref, env.COMPREHENSIVE_TESTS_BRANCH) || contains(env.QBT_ALWAYS_TEST, matrix.QBT_VER))
        id: cache-libtorrent
        uses: actions/cache@v3
        with:
          path: ${{ env.LIBTORRENT_INSTALLS }}/libtorrent_${{ env.LIBTORRENT_VER }}
          key: libtorrent-installs--${{ runner.os }}-${{ env.LIBTORRENT_VER }}

      - name: Build libtorrent
        # if cache missed, build libtorrent library.
        if: |
          (steps.cache-libtorrent.outputs.cache-hit != 'true')
          && (contains(github.ref, env.COMPREHENSIVE_TESTS_BRANCH) || contains(env.QBT_ALWAYS_TEST, matrix.QBT_VER))
        run: |
          set -x
          SRC_DIR="$LIBTORRENT_INSTALLS/src"
          LIBTORRENT_INSTALL_DIR="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER"
          mkdir -p "$SRC_DIR" && mkdir -p "$LIBTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          git clone --recurse-submodules https://github.com/arvidn/libtorrent.git --branch v${{ env.LIBTORRENT_VER }} --depth 1
          cd libtorrent
          cmake \
            -B cmake-build-dir/Release \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$LIBTORRENT_INSTALL_DIR"
          cmake --build cmake-build-dir/Release --parallel $(nproc)
          cmake --install cmake-build-dir/Release

      - name: Cache qBittorrent
        # set up cache for qBittorrent binary
        if: (contains(github.ref, env.COMPREHENSIVE_TESTS_BRANCH) || contains(env.QBT_ALWAYS_TEST, matrix.QBT_VER))
        id: cache-qbittorrent
        uses: actions/cache@v3
        with:
          path: ${{ env.QBITTORRENT_INSTALLS }}
          key: qbittorrent-installs--${{ runner.os }}-${{ matrix.QBT_VER }}-${{ env.LIBTORRENT_VER }}

      - name: Build qBittorrent
        # if cache missed, compile qBittorrent binary
        if: |
          (steps.cache-qbittorrent.outputs.cache-hit != 'true')
          && (contains(github.ref, env.COMPREHENSIVE_TESTS_BRANCH) || contains(env.QBT_ALWAYS_TEST, matrix.QBT_VER))
        run: |
          set -x
          SRC_DIR="$QBITTORRENT_INSTALLS/src"
          QBITTORRENT_INSTALL_DIR="$QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}"
          LIBTORRENT_DIR="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER"
          mkdir -p "$SRC_DIR" && mkdir -p "$QBITTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          rm -rf qBittorrent
          git clone https://github.com/qbittorrent/qBittorrent.git --branch release-${{ matrix.QBT_VER }} --depth 1
          cd qBittorrent
          cmake \
            -G "Ninja" \
            -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$LIBTORRENT_DIR" \
            -DVERBOSE_CONFIGURE=ON \
            -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE \
            -DQBT_VER_STATUS= \
            -DGUI=OFF \
            -DCMAKE_INSTALL_PREFIX="$QBITTORRENT_INSTALL_DIR"
          cmake --build build --parallel $(nproc)
          cmake --install build

      - name: Install Python Dependencies
        # install the python dependencies to test qbittorrent-api
        if: (contains(github.ref, env.COMPREHENSIVE_TESTS_BRANCH) || contains(env.QBT_ALWAYS_TEST, matrix.QBT_VER))
        run: |
          python -m pip install -U pip wheel setuptools
          pip install -U codecov coveralls pytest pytest-cov
          pip install .

      - name: Test with pytest
        # finally....start qBittorrent and run tests via pytest
        if: contains(github.ref, env.COMPREHENSIVE_TESTS_BRANCH) || contains(env.QBT_ALWAYS_TEST, matrix.QBT_VER)
        run: |
          mkdir -p $HOME/Downloads  # default download location for qbittorrent
          export LD_LIBRARY_PATH="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER/lib/:$LD_LIBRARY_PATH"
          $QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}/bin/qbittorrent-nox --daemon
          python -c "import sys; print(sys.version)"
          $QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}/bin/qbittorrent-nox -v
          export QBT_VER=${{ matrix.QBT_VER }}  # tell pytest which qbittorrent is being tested
          pytest

      - name: Upload Coverage to Codecov
        # send coverage report from pytest to codecov
        if: |
          contains(env.SUBMIT_COVERAGE_VERSIONS, matrix.python-version)
          && (contains(github.ref, env.COMPREHENSIVE_TESTS_BRANCH) || contains(env.QBT_ALWAYS_TEST, matrix.QBT_VER))
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true

  tests-legacy-qbt:
    #######
    # Run tests against old qBittorrent release and all Python releases
    #######
    name: "Release Legacy Test ${{ matrix.python-version }} - v${{ matrix.QBT_VER }}"
    needs: [tests-extended, verify]
    runs-on: ubuntu-20.04
    continue-on-error: true
    env:
      LIBTORRENT_VER: 1.2.16
    strategy:
      matrix:
        QBT_VER: ${{ fromJson(needs.verify.outputs.qbittorrent-legacy-versions) }}
        python-version: ${{ fromJson(needs.verify.outputs.python-versions) }}
    steps:
      - name: Branch
        run: echo Branch ${{ github.ref }} ${{ github.head_ref }}

      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install OS Dependencies (pre v4.4.0)
        # dependencies to compile and run libtorrent and qBittorrent
        run: |
          sudo apt update
          sudo apt install build-essential cmake ninja-build pkg-config git zlib1g-dev libssl-dev libgeoip-dev \
            automake libtool libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev
          sudo apt install --no-install-recommends qtbase5-dev qttools5-dev libqt5svg5-dev

      - name: Cache libtorrent
        # set up cache for libtorrent library
        id: cache-libtorrent
        uses: actions/cache@v3
        with:
          path: ${{ env.LIBTORRENT_INSTALLS }}/libtorrent_${{ env.LIBTORRENT_VER }}
          key: libtorrent-installs--${{ runner.os }}-${{ env.LIBTORRENT_VER }}

      - name: Build libtorrent
        # if cache missed, build libtorrent library.
        if: (steps.cache-libtorrent.outputs.cache-hit != 'true')
        run: |
          set -x
          SRC_DIR="$LIBTORRENT_INSTALLS/src"
          LIBTORRENT_INSTALL_DIR="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER"
          mkdir -p "$SRC_DIR" && mkdir -p "$LIBTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          git clone --recurse-submodules https://github.com/arvidn/libtorrent.git --branch v${{ env.LIBTORRENT_VER }} --depth 1
          cd libtorrent
          cmake \
            -B cmake-build-dir/Release \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$LIBTORRENT_INSTALL_DIR"
          cmake --build cmake-build-dir/Release --parallel $(nproc)
          cmake --install cmake-build-dir/Release

      - name: Cache qBittorrent
        # set up cache for qBittorrent binary legacy
        id: cache-qbittorrent-legacy
        uses: actions/cache@v3
        with:
          path: ${{ env.QBITTORRENT_INSTALLS }}
          key: qbittorrent-installs--${{ runner.os }}-${{ matrix.QBT_VER }}-${{ env.LIBTORRENT_VER }}

      - name: Build qBittorrent
        # if cache missed, compile an older version of qBittorrent, i.e. < v4.2.5
        if: (steps.cache-qbittorrent-legacy.outputs.cache-hit != 'true')
        run: |
          set -x
          SRC_DIR="$QBITTORRENT_INSTALLS/src"
          QBITTORRENT_INSTALL_DIR="$QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}"
          LIBTORRENT_DIR="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER"
          mkdir -p "$SRC_DIR" && mkdir -p "$QBITTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          rm -rf qBittorrent
          git clone https://github.com/qbittorrent/qBittorrent.git --branch release-${{ matrix.QBT_VER }} --depth 1
          cd qBittorrent
          export libtorrent_CFLAGS="$LIBTORRENT_DIR/include/"
          export libtorrent_LIBS="$LIBTORRENT_DIR/lib/libtorrent-rasterbar.so"
          ./configure \
            CXXFLAGS="-std=c++17" \
            CFLAGS="-I$LIBTORRENT_DIR/include/libtorrent" \
            --disable-gui \
            --prefix="$QBITTORRENT_INSTALL_DIR"
          make -j$(nproc) install

      - name: Install Python Dependencies
        # install the python dependencies to test qbittorrent-api
        run: |
          python -m pip install -U pip wheel setuptools
          pip install -U codecov coveralls pytest pytest-cov
          pip install .

      - name: Test with pytest
        # finally....start qBittorrent and run tests via pytest
        run: |
          mkdir -p $HOME/Downloads  # default download location for qbittorrent
          export LD_LIBRARY_PATH="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER/lib/:$LD_LIBRARY_PATH"
          $QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}/bin/qbittorrent-nox --daemon
          python -c "import sys; print(sys.version)"
          $QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}/bin/qbittorrent-nox -v
          export QBT_VER=${{ matrix.QBT_VER }}  # tell pytest which qbittorrent is being tested
          pytest

      - name: Upload Coverage to Codecov
        # send coverage report from pytest to codecov
        if: |
          contains(env.SUBMIT_COVERAGE_VERSIONS, matrix.python-version)
          && (contains(github.ref, env.COMPREHENSIVE_TESTS_BRANCH) || contains(env.QBT_ALWAYS_TEST, matrix.QBT_VER))
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true

  tests-dev-qbt:
    name: "Dev Branch Test ${{ matrix.QBT_VER }}"
    needs: tests-smoke
    runs-on: ubuntu-20.04  # update Qt PPA when moving beyond 20.04
    continue-on-error: true
    env:
      IS_QBT_DEV: True
    strategy:
      matrix:
        QBT_VER: ["master", "v4_4_x", "v4_3_x"]
    steps:
      - name: Branch
        run: echo Branch ${{ github.ref }} ${{ github.head_ref }}

      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.LATEST_PYTHON_VER }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.LATEST_PYTHON_VER }}
          cache: 'pip'

      - name: Install OS Dependencies
        # dependencies to compile and run libtorrent and qBittorrent
        # qBt v4.4.0 requires >Qt v5.15.2....but that Qt isn't available from ubuntu PPAs until 21.04
        run: |
          sudo add-apt-repository ppa:beineri/opt-qt-5.15.2-focal
          sudo apt update
          sudo apt install build-essential cmake ninja-build pkg-config git zlib1g-dev libssl-dev libgeoip-dev \
            automake libtool libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev
          sudo apt install --no-install-recommends qt515base qt515tools libqt5svg5-dev

      - name: Cache libtorrent
        # set up cache for libtorrent library
        id: cache-libtorrent
        uses: actions/cache@v3
        with:
          path: ${{ env.LIBTORRENT_INSTALLS }}/libtorrent_${{ env.LIBTORRENT_VER }}
          key: libtorrent-installs--${{ runner.os }}-${{ env.LIBTORRENT_VER }}

      - name: Build libtorrent
        # if cache missed, build libtorrent library.
        if: steps.cache-libtorrent.outputs.cache-hit != 'true'
        run: |
          set -x
          SRC_DIR="$LIBTORRENT_INSTALLS/src"
          LIBTORRENT_INSTALL_DIR="$LIBTORRENT_INSTALLS/libtorrent_${{ env.LIBTORRENT_VER }}"
          mkdir -p "$SRC_DIR" && mkdir -p "$LIBTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          git clone --recurse-submodules https://github.com/arvidn/libtorrent.git --branch v${{ env.LIBTORRENT_VER }} --depth 1
          cd libtorrent
          cmake \
            -B cmake-build-dir/Release \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$LIBTORRENT_INSTALL_DIR"
          cmake --build cmake-build-dir/Release --parallel $(nproc)
          cmake --install cmake-build-dir/Release

      - name: Build qBittorrent
        # if cache missed, compile qBittorrent binary
        if: steps.cache-qbittorrent.outputs.cache-hit != 'true'
        run: |
          set -x
          SRC_DIR="$QBITTORRENT_INSTALLS/src"
          QBITTORRENT_INSTALL_DIR="$QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}"
          LIBTORRENT_DIR="$LIBTORRENT_INSTALLS/libtorrent_${{ env.LIBTORRENT_VER }}"
          mkdir -p "$SRC_DIR" && mkdir -p "$QBITTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          rm -rf qBittorrent
          git clone https://github.com/qbittorrent/qBittorrent.git --branch ${{ matrix.QBT_VER }} --depth 1
          cd qBittorrent
          cmake \
            -G "Ninja" \
            -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$LIBTORRENT_DIR" \
            -DVERBOSE_CONFIGURE=ON \
            -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE \
            -DQBT_VER_STATUS= \
            -DGUI=OFF \
            -DCMAKE_INSTALL_PREFIX="$QBITTORRENT_INSTALL_DIR"
          cmake --build build --parallel $(nproc)
          cmake --install build

      - name: Install Python Dependencies
        # install the python dependencies to test qbittorrent-api
        run: |
          python -m pip install -U pip wheel setuptools
          pip install -U codecov coveralls pytest pytest-cov
          pip install .

      - name: Test with pytest
        run: |
          mkdir -p $HOME/Downloads  # default download location for qbittorrent
          export LD_LIBRARY_PATH="$LIBTORRENT_INSTALLS/libtorrent_${{ env.LIBTORRENT_VER }}/lib/:$LD_LIBRARY_PATH"
          $QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}/bin/qbittorrent-nox --daemon
          python -c "import sys; print(sys.version)"
          $QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}/bin/qbittorrent-nox -v
          pytest

      - name: Upload Coverage to Codecov
        # send coverage report from pytest to codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true

      - name: Send mail
        if: failure()
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: ${{ github.job }} job of ${{ github.repository }} failed
          body: |
            ${{ github.job }} job in workflow ${{ github.workflow }} of ${{ github.repository }} failed.
            https://github.com/rmartin16/qbittorrent-api/actions/runs/${{ github.run_id }}
          to: rmartin16+github-action@gmail.com   # comma-separated string
          from: rmartin16+github-action@gmail.com

  package:
    #######
    # Verify build and packaging is successful
    #######
    name: Build & Verify Package
    needs: tests-smoke
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.LATEST_PYTHON_VER }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.LATEST_PYTHON_VER }}
          cache: 'pip'

      - name: Install Build Tools
        run: python -m pip install --upgrade pip setuptools wheel twine build

      - name: Build Package
        run: python -m build

      - name: List Result
        run: ls -l dist

      - name: Check long_description
        run: python -m twine check dist/*

  install-dev:
    #######
    # Verify package can be installed on all platforms
    #######
    name: Verify Dev Env
    needs: package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.LATEST_PYTHON_VER }}
        uses: "actions/setup-python@v2"
        with:
          python-version: ${{ env.LATEST_PYTHON_VER }}

      - name: Install in Dev Mode
        run: python -m pip install -e .[dev]

      - name: Import Package
        run: python -c 'import qbittorrentapi; print(qbittorrentapi.Client())'
